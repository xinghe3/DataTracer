using CN.MACH.AI.UnitTest.Core.Utils;
using CN.MACH.Aop.DataTracer.Models;
using CN.MACH.Aop.DataTracer.Services;
using CN.MACH.AOP.Fody.Index;
using CN.MACH.AOP.Fody.Utils;
using DC.ETL.Infrastructure.Cache;
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace CN.MACH.Aop.DataTracer.Views.Redis
{
    /// <summary>
    /// RedisSubscribView.xaml 的交互逻辑
    /// 消息能修改能复制 能批量生产 能保存一个系列的消息 批量重发 保持原有时间间隔
    /// 考虑消息 消息内容 的复制粘贴及修改 删除
    /// 消息来源记录
    /// </summary>
    public partial class RedisSubscribView : UserControl
    {
        private readonly ICacheProvider cacheProvider = null;
        private ObservableCollection<RedisMsgRecord> records = new ObservableCollection<RedisMsgRecord>();

        public ObservableCollection<RedisMsgRecord> Records
        {
            get { return records; }
            set { records = value; }
        }


        /// <summary>
        /// 控制暂停在界面更新消息 后台还是在接收消息
        /// </summary>
        public bool Paused
        {
            get { return (bool)GetValue(PausedProperty); }
            set { SetValue(PausedProperty, value); }
        }

        // Using a DependencyProperty as the backing store for Paused.  This enables animation, styling, binding, etc...
        public static readonly DependencyProperty PausedProperty =
            DependencyProperty.Register("Paused", typeof(bool), typeof(RedisSubscribView), new PropertyMetadata(false));



        private List<RedisMsgRecord> allRecords = new List<RedisMsgRecord>();
        private RedisQueryWords query = new RedisQueryWords();
        private SavedMsgs msgs = new SavedMsgs();

        public RedisSubscribView()
        {
            InitializeComponent();
            DataContext = this;
            IndexSettings indexSettings = FodyCacheManager.GetSetting();
            cacheProvider = FodyCacheManager.GetInterface(indexSettings?.CacheSetting);
            string subscribKeys = File.ReadAllText("redissubkeys.txt");

            string[] linekeys = StringUtils.SplitByLine(subscribKeys, StringUtils.Trim);
            IMQProvider mQProvider = cacheProvider as IMQProvider;
            if (mQProvider != null && linekeys!=null &&  linekeys.Length > 0)
            {
                int nRet = mQProvider.Init();
                string pfxKey = indexSettings.CacheSetting.PefixKey;
                int n = 0;
                foreach (var key in linekeys)
                {
                    string[] keyDataArr = StringUtils.Split(key, "\t");
                    if (keyDataArr == null || keyDataArr.Length <= 0) continue;
                    n++;
                    string keyName = keyDataArr[0];
                    string keyDesc = keyDataArr.Length > 1 ? keyDataArr[1] : string.Empty;
                    int nret = AppendSubscribe(mQProvider, pfxKey + keyName, keyDesc);
                    if (nret != ErrorCode.Success)
                        break;
                }
                nRet = mQProvider.Start();
                if(nRet == ErrorCode.Success)
                    MessageBox.Show($"完成{n}个消息订阅");
                else
                    MessageBox.Show($"连接失败");
            }
            msglist.Visibility = Visibility.Visible;
        }

        private int AppendSubscribe(IMQProvider mQProvider, string key, string desc)
        {
            if (string.IsNullOrEmpty(key)) return ErrorCode.EmptyParams;
            return mQProvider.Subscribe(key, (opt) =>
            {
                if (string.IsNullOrEmpty(opt)) return;
                RedisMsgRecord redisMsgRecord = new RedisMsgRecord(DateTime.Now.ToString("HH:mm:ss"), key, opt, desc);
                if (!query.Filter(redisMsgRecord))
                    return;
                Dispatcher.Invoke(() =>
                {
                    if (Paused) // 如果暂停就不更新界面
                        return;
                    allRecords.Add(redisMsgRecord);
                    Records.Add(redisMsgRecord);
                    msglist.ScrollIntoView(msglist.Items[msglist.Items.Count - 1]);
                });
            });
        }

        private void ClearBtn_Click(object sender, RoutedEventArgs e)
        {
            Dispatcher.Invoke(() =>
            {
                Records.Clear();
            });
            allRecords.Clear();
        }

        private void Search()
        {
            string searchWords = searchKeyWords.Text;
            string searchContents = searchContent.Text;

            Task.Run(()=>
            {
                query = RedisQueryWords.Build(searchContents, searchContents);
                IEnumerable<RedisMsgRecord> list = query != null ? allRecords.Where(r => query.Filter(r)) : allRecords;

                Dispatcher.Invoke(() =>
                {
                    Records.Clear();
                    foreach (var item in list)
                    {
                        Records.Add(item);
                    }
                });

            });
        }
        private void SearchMsgs_Click(object sender, RoutedEventArgs e)
        {
            Search();
        }
        
        private void LoadMsgs_Click(object sender, RoutedEventArgs e)
        {
            allRecords = msgs.Load();
            Search();
        }
        private void ClearSavedMsgs_Click(object sender, RoutedEventArgs e)
        {
            msgs.Clear();
        }
        private void SaveMsg_Click(object sender, RoutedEventArgs e)
        {
            Button btn = sender as Button;
            RedisMsgRecord record = btn.DataContext as RedisMsgRecord;
            if (record == null)
                return;
            msgs.InsertUpdate(record);
        }
        private void DelMsg_Click(object sender, RoutedEventArgs e)
        {
            Button btn = sender as Button;
            RedisMsgRecord record = btn.DataContext as RedisMsgRecord;
            if (record == null)
                return;
            allRecords.Remove(record);
            Records.Remove(record);
            msgs.Remove(record);
        }
        private void SendMsg_Click(object sender, RoutedEventArgs e)
        {
            Button btn = sender as Button;
            RedisMsgRecord record = btn.DataContext as RedisMsgRecord;
            if (record == null)
                return;
            IMQProvider mQProvider = cacheProvider as IMQProvider;
            if (mQProvider != null)
            {
                // add a string pub func
                mQProvider.Publish(record.Name, record.Value);
            }
        }

        private void MsgName_MouseRightButtonUp(object sender, MouseButtonEventArgs e)
        {
            TextBlock t = sender as TextBlock;
            Clipboard.SetText(t.Text);
        }
    }
}
